
query GetAll{
    response: customers {
        ...customerDetails
    }
}

query GetCustomerbyId($id: ID!){
    response: customerById(id: $id){
        ...customerDetails
    }
}

mutation CreateCustomer($customer: CustomerInput!){
    response: createCustomer(customer: $customer){
        ...customerDetails
    }
}



mutation UpdateCustomer($id: ID!, $customer: CustomerInput){
    response: updateCustomer(id: $id, customer: $customer){
        ...customerDetails
    }
}

mutation DeleteCustomer($id: ID!){
    response: deleteCustomer(id: $id){
        id,
        status
    }
}

fragment customerDetails on Customer{
    id
    name
    age
    city
}

#craze
type Query{
    customers: [Customer]!
    customerById(id: ID!) : Customer

}

type Mutation{
    createCustomer(customer: CustomerInput) : Customer
    updateCustomer(id: ID!, customer: CustomerInput!) : Customer
    deleteCustomer(id: ID!): DeleteResponse!
}

type Customer{
    id: ID!
    name: String
    age: Int
    city: String
}
input CustomerInput{
    name: String
    age: Int
    city: String
}
type DeleteResponse{
    id: ID!,
    status: Status
}
enum Status{
    SUCCESS
    FAILURE
}